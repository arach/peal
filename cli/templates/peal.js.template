import { Howl } from 'howler';

// Peal sound player - generated by peal-cli
export class PealPlayer {
  constructor(basePath = './peal') {
    this.sounds = new Map();
    this.basePath = basePath;
    this.preloadSounds();
  }

  preloadSounds() {
    const soundFiles = {{SOUND_LIST}};
    
    soundFiles.forEach((sound) => {
      this.sounds.set(sound, new Howl({
        src: [`${this.basePath}/${sound}.wav`, `${this.basePath}/${sound}.mp3`],
        preload: true,
        volume: 0.7
      }));
    });
  }

  play(soundName, options) {
    const sound = this.sounds.get(soundName);
    if (!sound) {
      console.warn(`Sound "${soundName}" not found`);
      return;
    }

    if (options?.volume !== undefined) {
      sound.volume(options.volume);
    }

    if (options?.loop !== undefined) {
      sound.loop(options.loop);
    }

    return sound.play();
  }

  stop(soundName) {
    if (soundName) {
      const sound = this.sounds.get(soundName);
      if (sound) {
        sound.stop();
      }
    } else {
      // Stop all sounds
      this.sounds.forEach(sound => sound.stop());
    }
  }

  pause(soundName) {
    if (soundName) {
      const sound = this.sounds.get(soundName);
      if (sound) {
        sound.pause();
      }
    } else {
      // Pause all sounds
      this.sounds.forEach(sound => sound.pause());
    }
  }

  resume(soundName) {
    if (soundName) {
      const sound = this.sounds.get(soundName);
      if (sound) {
        sound.play();
      }
    } else {
      // Resume all sounds
      this.sounds.forEach(sound => sound.play());
    }
  }

  setVolume(volume) {
    this.sounds.forEach(sound => sound.volume(volume));
  }

  mute(muted = true) {
    this.sounds.forEach(sound => sound.mute(muted));
  }

  // Convenience methods for common sounds
{{CONVENIENCE_METHODS}}
}

// Export singleton instance
export const peal = new PealPlayer();

// Also export for custom configurations
export default PealPlayer;