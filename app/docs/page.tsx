'use client'

import Header from '@/components/Header'
import Link from 'next/link'
import { useState } from 'react'
import { isStaticBuild } from '@/utils/build'
import { getPublicUrl } from '@/utils/url'
import { 
  FileCode, 
  Zap, 
  Book, 
  Wrench,
  HelpCircle,
  ArrowRight,
  Terminal,
  Package,
  Volume2,
  CheckCircle
} from 'lucide-react'

const quickStartContent = isStaticBuild ? `# Quick Start

Peal will be available soon! We're putting the finishing touches on our sound library.

## What's Coming

1. **Professional UI Sounds** - Carefully crafted sounds for modern web apps
2. **Easy Integration** - Simple API that works with any framework  
3. **Lightweight** - Tiny footprint, big impact

Stay tuned for the official launch!` : `# Quick Start

Get Peal sounds working in your app in under 2 minutes.

## 1. Add Sounds (30 seconds)

\`\`\`bash
npx @peal-sounds/peal add click success error notification
\`\`\`

This downloads professional UI sounds and generates a helper file.

## 2. Install the Library (30 seconds)

\`\`\`bash
npm install @peal-sounds/peal
\`\`\``

const sections = [
  {
    id: 'quick-start',
    title: 'Quick Start',
    icon: Zap,
    content: quickStartContent + `

## 3. Use It (1 minute)

\`\`\`javascript
import { peal } from './peal';

// In your click handler
button.addEventListener('click', async () => {
  peal.click();  // Play click sound
  
  try {
    await saveData();
    peal.success();  // Play success sound
  } catch (err) {
    peal.error();    // Play error sound
  }
});
\`\`\`

That's it! You now have professional UI sounds in your app.
    `
  },
  {
    id: 'api',
    title: 'API Reference',
    icon: FileCode,
    content: `
# API Reference

## Basic Usage

\`\`\`javascript
import { peal } from './peal';  // Generated by CLI

peal.click();      // Play click sound
peal.success();    // Play success sound
\`\`\`

## Methods

### Playing Sounds

#### \`peal.play(soundName, options?)\`
Play any sound with optional settings.

\`\`\`javascript
peal.play('success', {
  volume: 0.5,    // Volume (0-1)
  loop: false,    // Loop the sound
  rate: 1.0       // Playback speed
});
\`\`\`

#### Convenience Methods
Each sound added via CLI gets its own method:

\`\`\`javascript
peal.click()       // Same as peal.play('click')
peal.success()     // Same as peal.play('success')
peal.error()       // Same as peal.play('error')
\`\`\`

### Playback Control

#### \`peal.stop(soundName?)\`
Stop sounds immediately.

\`\`\`javascript
peal.stop('success');  // Stop specific sound
peal.stop();          // Stop all sounds
\`\`\`

#### \`peal.pause(soundName?)\`
Pause sounds (resumable).

\`\`\`javascript
peal.pause('music');   // Pause specific sound
peal.pause();         // Pause all sounds
\`\`\`

### Volume Control

#### \`peal.volume(level?)\`
Global volume control.

\`\`\`javascript
peal.volume(0.5);           // Set to 50%
const current = peal.volume(); // Get current volume
\`\`\`

#### \`peal.mute(muted?)\`
Global mute control.

\`\`\`javascript
peal.mute(true);            // Mute all sounds
peal.mute(false);           // Unmute
const isMuted = peal.mute(); // Get mute state
\`\`\`
    `
  },
  {
    id: 'cli',
    title: 'CLI Commands',
    icon: Terminal,
    content: `
# CLI Commands

## List All Sounds
\`\`\`bash
npx @peal-sounds/peal list
\`\`\`

## Add Sounds
\`\`\`bash
# Interactive selection
npx @peal-sounds/peal add

# Add specific sounds
npx @peal-sounds/peal add click success error

# Add to custom directory
npx @peal-sounds/peal add --dir ./sounds

# Generate TypeScript helper
npx @peal-sounds/peal add --typescript
\`\`\`

## Remove Sounds
\`\`\`bash
# Interactive removal
npx @peal-sounds/peal remove

# Remove specific sounds
npx @peal-sounds/peal remove click tap

# Remove from custom directory
npx @peal-sounds/peal remove --dir ./sounds
\`\`\`

## Play Sounds
\`\`\`bash
# Play a specific sound
npx @peal-sounds/peal play click

# Play a demo of all sounds
npx @peal-sounds/peal demo

# Demo with custom delay
npx @peal-sounds/peal demo --delay 2000
\`\`\`
    `
  },
  {
    id: 'examples',
    title: 'Examples',
    icon: Book,
    content: `
# Framework Examples

## React

\`\`\`jsx
import { peal } from './peal';
import { useState } from 'react';

function SubmitButton({ onSubmit }) {
  const [isLoading, setIsLoading] = useState(false);

  const handleClick = async () => {
    peal.click();
    setIsLoading(true);
    
    try {
      await onSubmit();
      peal.success();
    } catch (error) {
      peal.error();
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <button 
      onClick={handleClick}
      onMouseEnter={() => peal.hover()}
      disabled={isLoading}
    >
      {isLoading ? 'Submitting...' : 'Submit'}
    </button>
  );
}
\`\`\`

## Vue 3

\`\`\`vue
<template>
  <button 
    @click="handleSubmit" 
    @mouseenter="peal.hover()"
    :disabled="isLoading"
  >
    {{ isLoading ? 'Submitting...' : 'Submit' }}
  </button>
</template>

<script setup>
import { ref } from 'vue';
import { peal } from './peal';

const isLoading = ref(false);

const handleSubmit = async () => {
  peal.click();
  isLoading.value = true;
  
  try {
    await submitForm();
    peal.success();
  } catch (error) {
    peal.error();
  } finally {
    isLoading.value = false;
  }
};
</script>
\`\`\`

## Common Patterns

### Loading States
\`\`\`javascript
async function fetchData() {
  peal.play('loading', { loop: true });
  
  try {
    const data = await api.getData();
    peal.stop('loading');
    peal.complete();
    return data;
  } catch (err) {
    peal.stop('loading');
    peal.error();
    throw err;
  }
}
\`\`\`

### Form Validation
\`\`\`javascript
async function submitForm(data) {
  peal.click();
  
  try {
    await api.submit(data);
    peal.success();
    showNotification('Saved!');
  } catch (error) {
    peal.error();
    showNotification('Failed to save');
  }
}
\`\`\`
    `
  },
  {
    id: 'troubleshooting',
    title: 'Troubleshooting',
    icon: HelpCircle,
    content: `
# Troubleshooting

## Sounds Not Playing

### Browser Console Errors
\`\`\`
DOMException: play() failed because the user didn't interact with the document first
\`\`\`

**Solution**: Sounds must be triggered by user interaction.

\`\`\`javascript
// ❌ Won't work - no user interaction
window.onload = () => peal.startup();

// ✅ Works - user clicked
button.onclick = () => peal.startup();
\`\`\`

### Module Import Errors

\`\`\`javascript
// ES Modules (most modern projects)
import { peal } from './peal';

// CommonJS (older Node.js projects)
const { peal } = require('./peal');
\`\`\`

### Build/Bundle Issues

**Vite** - Copy sounds to public:
\`\`\`javascript
// vite.config.js
export default {
  publicDir: 'public',
  // Sounds in public/peal/ will be served at /peal/
}
\`\`\`

**Next.js** - Put in public folder:
\`\`\`bash
# Move sounds to public
mv peal public/

# Update peal.js to use public path
peal.load('click', '/peal/click.wav');
\`\`\`

## Debug Checklist

1. **Open browser console** - Any errors?
2. **Check network tab** - Are WAV files loading?
3. **Verify file paths** - Do paths in peal.js match file locations?
4. **Test with demo** - Does \`npx @peal-sounds/peal demo\` work?
5. **Check volume/mute** - System volume, browser tab not muted?
6. **User interaction** - Sounds triggered by user action?
    `
  }
]

function CodeBlock({ children, language = 'javascript' }: { children: string, language?: string }) {
  // Enhanced syntax highlighting
  const highlightCode = (code: string) => {
    let highlighted = code
    
    // Comments (must come first to avoid conflicts)
    highlighted = highlighted.replace(/(\/\/.*$)/gm, '<span class="text-gray-500">$1</span>')
    
    // Strings (improved to handle escaped quotes)
    highlighted = highlighted.replace(/(['"`])(?:[^\\]|\\.)*?\1/g, '<span class="text-green-600 dark:text-green-400">$&</span>')
    
    // Keywords
    highlighted = highlighted.replace(/\b(import|from|const|let|var|function|async|await|try|catch|if|else|return|new|export|default|class|extends|constructor|throw|finally)\b/g, '<span class="text-blue-600 dark:text-blue-400">$1</span>')
    
    // Boolean and null
    highlighted = highlighted.replace(/\b(true|false|null|undefined)\b/g, '<span class="text-purple-600 dark:text-purple-400">$1</span>')
    
    // Numbers
    highlighted = highlighted.replace(/\b(\d+(?:\.\d+)?)\b/g, '<span class="text-purple-600 dark:text-purple-400">$1</span>')
    
    // Functions
    highlighted = highlighted.replace(/(\w+)(?=\s*\()/g, '<span class="text-yellow-600 dark:text-yellow-400">$1</span>')
    
    // Peal methods
    highlighted = highlighted.replace(/\b(peal|play|stop|pause|volume|mute|click|success|error|notification)\b/g, '<span class="text-orange-600 dark:text-orange-400">$1</span>')
    
    return highlighted
  }
  
  const isTerminal = language === 'bash' || language === 'shell'
  
  if (isTerminal) {
    return (
      <div className="bg-gray-950 rounded-md overflow-hidden border border-gray-800 my-2">
        <div className="bg-gray-900 px-3 py-1.5 border-b border-gray-800 flex items-center gap-2">
          <div className="flex items-center gap-1.5">
            <div className="w-2.5 h-2.5 rounded-full bg-red-500/40"></div>
            <div className="w-2.5 h-2.5 rounded-full bg-yellow-500/40"></div>
            <div className="w-2.5 h-2.5 rounded-full bg-green-500/40"></div>
          </div>
          <span className="text-xs text-gray-500 font-mono">terminal</span>
        </div>
        <pre className="p-3 overflow-x-auto">
          <code className="text-xs font-mono text-gray-300 leading-5">{children}</code>
        </pre>
      </div>
    )
  }
  
  return (
    <pre className="bg-gray-50 dark:bg-gray-950/50 border border-gray-200 dark:border-gray-800 p-3 rounded-md text-xs overflow-x-auto my-2">
      <code className="font-mono leading-5">
        {isTerminal ? children : (
          <span dangerouslySetInnerHTML={{ __html: highlightCode(children) }} />
        )}
      </code>
    </pre>
  )
}

function MarkdownContent({ content }: { content: string }) {
  // Simple markdown parser for our docs
  const lines = content.trim().split('\n')
  const elements: React.ReactNode[] = []
  let i = 0
  
  while (i < lines.length) {
    const line = lines[i]
    
    // Headers
    if (line.startsWith('# ')) {
      elements.push(
        <h1 key={i} className="text-2xl font-semibold text-gray-900 dark:text-white mb-4 mt-8">
          {line.substring(2)}
        </h1>
      )
    } else if (line.startsWith('## ')) {
      elements.push(
        <h2 key={i} className="text-xl font-medium text-gray-900 dark:text-white mb-3 mt-6">
          {line.substring(3)}
        </h2>
      )
    } else if (line.startsWith('### ')) {
      elements.push(
        <h3 key={i} className="text-lg font-medium text-gray-900 dark:text-white mb-2 mt-4">
          {line.substring(4)}
        </h3>
      )
    } else if (line.startsWith('#### ')) {
      elements.push(
        <h4 key={i} className="text-base font-medium text-gray-800 dark:text-gray-200 mb-2 mt-3">
          {line.substring(5)}
        </h4>
      )
    }
    // Code blocks
    else if (line.startsWith('```')) {
      const language = line.substring(3)
      const codeLines = []
      i++
      while (i < lines.length && !lines[i].startsWith('```')) {
        codeLines.push(lines[i])
        i++
      }
      elements.push(
        <div key={`code-${i}`} className="my-4">
          <CodeBlock language={language}>{codeLines.join('\n')}</CodeBlock>
        </div>
      )
    }
    // Inline code
    else if (line.includes('`')) {
      const parts = line.split('`')
      const lineElements: React.ReactNode[] = []
      parts.forEach((part, idx) => {
        if (idx % 2 === 0) {
          lineElements.push(part)
        } else {
          lineElements.push(
            <code key={`inline-${i}-${idx}`} className="bg-gray-100 dark:bg-gray-800 px-1.5 py-0.5 rounded text-xs font-mono">
              {part}
            </code>
          )
        }
      })
      elements.push(
        <p key={i} className="mb-3 text-sm leading-relaxed">
          {lineElements}
        </p>
      )
    }
    // Bold text
    else if (line.includes('**')) {
      const parts = line.split('**')
      const lineElements: React.ReactNode[] = []
      parts.forEach((part, idx) => {
        if (idx % 2 === 0) {
          lineElements.push(part)
        } else {
          lineElements.push(
            <strong key={`bold-${i}-${idx}`} className="font-medium text-gray-900 dark:text-white">
              {part}
            </strong>
          )
        }
      })
      elements.push(
        <p key={i} className="mb-3 text-sm leading-relaxed">
          {lineElements}
        </p>
      )
    }
    // Regular paragraphs
    else if (line.trim()) {
      elements.push(
        <p key={i} className="mb-3 text-sm leading-relaxed">
          {line}
        </p>
      )
    }
    
    i++
  }
  
  return <div className="prose prose-sm dark:prose-invert max-w-none text-gray-700 dark:text-gray-300">{elements}</div>
}

export default function DocsPage() {
  const [activeSection, setActiveSection] = useState('quick-start')
  const activeContent = sections.find(s => s.id === activeSection)

  return (
    <>
      <Header />
      <main className="min-h-screen bg-white dark:bg-gray-950">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
          {/* Hero Section */}
          <div className="text-center mb-12">
            <h1 className="text-3xl font-semibold text-gray-900 dark:text-white mb-4">
              Documentation
            </h1>
            <p className="text-base text-gray-600 dark:text-gray-400">
              Everything you need to add professional sounds to your web app
            </p>
          </div>

          {/* Quick Links */}
          {!isStaticBuild && (
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-12">
              <Link
                href="https://www.npmjs.com/package/@peal-sounds/peal"
                target="_blank"
                className="group p-6 bg-gray-50 dark:bg-gray-900 rounded-xl hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors"
              >
                <Package className="w-8 h-8 text-blue-600 mb-3" />
                <h3 className="font-semibold text-gray-900 dark:text-white mb-1">npm Package</h3>
                <p className="text-xs text-gray-600 dark:text-gray-400">
                  @peal-sounds/peal
                </p>
                <ArrowRight className="w-4 h-4 text-gray-400 mt-2 group-hover:translate-x-1 transition-transform" />
              </Link>

              <Link
                href="https://github.com/arach/peal"
                target="_blank"
                className="group p-6 bg-gray-50 dark:bg-gray-900 rounded-xl hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors"
              >
                <FileCode className="w-8 h-8 text-blue-600 mb-3" />
                <h3 className="font-semibold text-gray-900 dark:text-white mb-1">GitHub</h3>
                <p className="text-xs text-gray-600 dark:text-gray-400">
                  Source code & issues
                </p>
                <ArrowRight className="w-4 h-4 text-gray-400 mt-2 group-hover:translate-x-1 transition-transform" />
              </Link>

              <button
                onClick={() => setActiveSection('quick-start')}
                className="group p-6 bg-gray-50 dark:bg-gray-900 rounded-xl hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors text-left"
              >
                <Zap className="w-8 h-8 text-blue-600 mb-3" />
                <h3 className="font-semibold text-gray-900 dark:text-white mb-1">Quick Start</h3>
                <p className="text-xs text-gray-600 dark:text-gray-400">
                  Get started in 2 minutes
                </p>
                <ArrowRight className="w-4 h-4 text-gray-400 mt-2 group-hover:translate-x-1 transition-transform" />
              </button>
            </div>
          )}

          {/* Documentation Content */}
          <div className="grid grid-cols-1 lg:grid-cols-4 gap-8">
            {/* Sidebar Navigation */}
            <nav className="lg:col-span-1">
              <div className="sticky top-24 space-y-1">
                {sections.map((section) => {
                  const Icon = section.icon
                  return (
                    <button
                      key={section.id}
                      onClick={() => setActiveSection(section.id)}
                      className={`w-full flex items-center gap-2 px-3 py-2 rounded-lg transition-colors text-left ${
                        activeSection === section.id
                          ? 'bg-blue-50 dark:bg-blue-900/20 text-blue-600 dark:text-blue-400'
                          : 'hover:bg-gray-50 dark:hover:bg-gray-900 text-gray-600 dark:text-gray-400'
                      }`}
                    >
                      <Icon className="w-4 h-4 flex-shrink-0" />
                      <span className="text-sm">{section.title}</span>
                    </button>
                  )
                })}
              </div>
            </nav>

            {/* Content Area */}
            <div className="lg:col-span-3">
              <div className="bg-white dark:bg-gray-900 rounded-lg shadow-sm border border-gray-200 dark:border-gray-800 p-6 lg:p-8">
                {activeContent && <MarkdownContent content={activeContent.content} />}
              </div>

              {/* Features */}
              {activeSection === 'quick-start' && (
                <div className="mt-6 grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div className="bg-gray-50 dark:bg-gray-900 rounded-lg p-4">
                    <Terminal className="w-6 h-6 text-blue-600 mb-2" />
                    <h3 className="text-sm font-medium text-gray-900 dark:text-white mb-1">
                      CLI Manages Sounds
                    </h3>
                    <p className="text-xs text-gray-600 dark:text-gray-400">
                      Add and remove sounds from our curated collection with simple commands
                    </p>
                  </div>

                  <div className="bg-gray-50 dark:bg-gray-900 rounded-lg p-4">
                    <Volume2 className="w-6 h-6 text-blue-600 mb-2" />
                    <h3 className="text-sm font-medium text-gray-900 dark:text-white mb-1">
                      Library Plays Them
                    </h3>
                    <p className="text-xs text-gray-600 dark:text-gray-400">
                      Thin wrapper around Howler.js with zero configuration needed
                    </p>
                  </div>

                  <div className="bg-gray-50 dark:bg-gray-900 rounded-lg p-4">
                    <CheckCircle className="w-6 h-6 text-blue-600 mb-2" />
                    <h3 className="text-sm font-medium text-gray-900 dark:text-white mb-1">
                      TypeScript Ready
                    </h3>
                    <p className="text-xs text-gray-600 dark:text-gray-400">
                      Full TypeScript support with generated types for your sounds
                    </p>
                  </div>

                  <div className="bg-gray-50 dark:bg-gray-900 rounded-lg p-4">
                    <Wrench className="w-6 h-6 text-blue-600 mb-2" />
                    <h3 className="text-sm font-medium text-gray-900 dark:text-white mb-1">
                      Framework Agnostic
                    </h3>
                    <p className="text-xs text-gray-600 dark:text-gray-400">
                      Works with React, Vue, Svelte, or vanilla JavaScript
                    </p>
                  </div>
                </div>
              )}
            </div>
          </div>
        </div>
      </main>
    </>
  )
}